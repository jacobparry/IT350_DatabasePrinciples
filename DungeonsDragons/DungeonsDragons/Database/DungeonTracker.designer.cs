#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DungeonsDragons.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DungeonsDragons")]
	public partial class DungeonTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDD_Action(DD_Action instance);
    partial void UpdateDD_Action(DD_Action instance);
    partial void DeleteDD_Action(DD_Action instance);
    partial void InsertDD_User(DD_User instance);
    partial void UpdateDD_User(DD_User instance);
    partial void DeleteDD_User(DD_User instance);
    partial void InsertDD_Adventure(DD_Adventure instance);
    partial void UpdateDD_Adventure(DD_Adventure instance);
    partial void DeleteDD_Adventure(DD_Adventure instance);
    partial void InsertDD_Beastiary(DD_Beastiary instance);
    partial void UpdateDD_Beastiary(DD_Beastiary instance);
    partial void DeleteDD_Beastiary(DD_Beastiary instance);
    partial void InsertDD_Character(DD_Character instance);
    partial void UpdateDD_Character(DD_Character instance);
    partial void DeleteDD_Character(DD_Character instance);
    partial void InsertDD_CharacterHasAction(DD_CharacterHasAction instance);
    partial void UpdateDD_CharacterHasAction(DD_CharacterHasAction instance);
    partial void DeleteDD_CharacterHasAction(DD_CharacterHasAction instance);
    partial void InsertDD_CharacterHasAdventure(DD_CharacterHasAdventure instance);
    partial void UpdateDD_CharacterHasAdventure(DD_CharacterHasAdventure instance);
    partial void DeleteDD_CharacterHasAdventure(DD_CharacterHasAdventure instance);
    partial void InsertDD_CharacterHasItem(DD_CharacterHasItem instance);
    partial void UpdateDD_CharacterHasItem(DD_CharacterHasItem instance);
    partial void DeleteDD_CharacterHasItem(DD_CharacterHasItem instance);
    partial void InsertDD_CharacterHasPack(DD_CharacterHasPack instance);
    partial void UpdateDD_CharacterHasPack(DD_CharacterHasPack instance);
    partial void DeleteDD_CharacterHasPack(DD_CharacterHasPack instance);
    partial void InsertDD_CharacterHasSkill(DD_CharacterHasSkill instance);
    partial void UpdateDD_CharacterHasSkill(DD_CharacterHasSkill instance);
    partial void DeleteDD_CharacterHasSkill(DD_CharacterHasSkill instance);
    partial void InsertDD_CharacterHasSpell(DD_CharacterHasSpell instance);
    partial void UpdateDD_CharacterHasSpell(DD_CharacterHasSpell instance);
    partial void DeleteDD_CharacterHasSpell(DD_CharacterHasSpell instance);
    partial void InsertDD_Class(DD_Class instance);
    partial void UpdateDD_Class(DD_Class instance);
    partial void DeleteDD_Class(DD_Class instance);
    partial void InsertDD_Creep(DD_Creep instance);
    partial void UpdateDD_Creep(DD_Creep instance);
    partial void DeleteDD_Creep(DD_Creep instance);
    partial void InsertDD_Item(DD_Item instance);
    partial void UpdateDD_Item(DD_Item instance);
    partial void DeleteDD_Item(DD_Item instance);
    partial void InsertDD_Pack(DD_Pack instance);
    partial void UpdateDD_Pack(DD_Pack instance);
    partial void DeleteDD_Pack(DD_Pack instance);
    partial void InsertDD_Race(DD_Race instance);
    partial void UpdateDD_Race(DD_Race instance);
    partial void DeleteDD_Race(DD_Race instance);
    partial void InsertDD_Skill(DD_Skill instance);
    partial void UpdateDD_Skill(DD_Skill instance);
    partial void DeleteDD_Skill(DD_Skill instance);
    partial void InsertDD_Spell(DD_Spell instance);
    partial void UpdateDD_Spell(DD_Spell instance);
    partial void DeleteDD_Spell(DD_Spell instance);
    #endregion
		
		public DungeonTrackerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DungeonsDragonsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DungeonTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DungeonTrackerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DungeonTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DungeonTrackerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DD_Action> DD_Actions
		{
			get
			{
				return this.GetTable<DD_Action>();
			}
		}
		
		public System.Data.Linq.Table<DD_User> DD_Users
		{
			get
			{
				return this.GetTable<DD_User>();
			}
		}
		
		public System.Data.Linq.Table<DD_Adventure> DD_Adventures
		{
			get
			{
				return this.GetTable<DD_Adventure>();
			}
		}
		
		public System.Data.Linq.Table<DD_Beastiary> DD_Beastiaries
		{
			get
			{
				return this.GetTable<DD_Beastiary>();
			}
		}
		
		public System.Data.Linq.Table<DD_Character> DD_Characters
		{
			get
			{
				return this.GetTable<DD_Character>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasAction> DD_CharacterHasActions
		{
			get
			{
				return this.GetTable<DD_CharacterHasAction>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasAdventure> DD_CharacterHasAdventures
		{
			get
			{
				return this.GetTable<DD_CharacterHasAdventure>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasItem> DD_CharacterHasItems
		{
			get
			{
				return this.GetTable<DD_CharacterHasItem>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasPack> DD_CharacterHasPacks
		{
			get
			{
				return this.GetTable<DD_CharacterHasPack>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasSkill> DD_CharacterHasSkills
		{
			get
			{
				return this.GetTable<DD_CharacterHasSkill>();
			}
		}
		
		public System.Data.Linq.Table<DD_CharacterHasSpell> DD_CharacterHasSpells
		{
			get
			{
				return this.GetTable<DD_CharacterHasSpell>();
			}
		}
		
		public System.Data.Linq.Table<DD_Class> DD_Classes
		{
			get
			{
				return this.GetTable<DD_Class>();
			}
		}
		
		public System.Data.Linq.Table<DD_Creep> DD_Creeps
		{
			get
			{
				return this.GetTable<DD_Creep>();
			}
		}
		
		public System.Data.Linq.Table<DD_Item> DD_Items
		{
			get
			{
				return this.GetTable<DD_Item>();
			}
		}
		
		public System.Data.Linq.Table<DD_Pack> DD_Packs
		{
			get
			{
				return this.GetTable<DD_Pack>();
			}
		}
		
		public System.Data.Linq.Table<DD_Race> DD_Races
		{
			get
			{
				return this.GetTable<DD_Race>();
			}
		}
		
		public System.Data.Linq.Table<DD_Skill> DD_Skills
		{
			get
			{
				return this.GetTable<DD_Skill>();
			}
		}
		
		public System.Data.Linq.Table<DD_Spell> DD_Spells
		{
			get
			{
				return this.GetTable<DD_Spell>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Action")]
	public partial class DD_Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _RaceID;
		
		private int _ClassID;
		
		private int _RequiredLevel;
		
		private EntitySet<DD_CharacterHasAction> _DD_CharacterHasActions;
		
		private EntityRef<DD_Class> _DD_Class;
		
		private EntityRef<DD_Race> _DD_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnRequiredLevelChanging(int value);
    partial void OnRequiredLevelChanged();
    #endregion
		
		public DD_Action()
		{
			this._DD_CharacterHasActions = new EntitySet<DD_CharacterHasAction>(new Action<DD_CharacterHasAction>(this.attach_DD_CharacterHasActions), new Action<DD_CharacterHasAction>(this.detach_DD_CharacterHasActions));
			this._DD_Class = default(EntityRef<DD_Class>);
			this._DD_Race = default(EntityRef<DD_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._DD_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._DD_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredLevel", DbType="Int NOT NULL")]
		public int RequiredLevel
		{
			get
			{
				return this._RequiredLevel;
			}
			set
			{
				if ((this._RequiredLevel != value))
				{
					this.OnRequiredLevelChanging(value);
					this.SendPropertyChanging();
					this._RequiredLevel = value;
					this.SendPropertyChanged("RequiredLevel");
					this.OnRequiredLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Action_DD_CharacterHasAction", Storage="_DD_CharacterHasActions", ThisKey="ID", OtherKey="ActionID")]
		public EntitySet<DD_CharacterHasAction> DD_CharacterHasActions
		{
			get
			{
				return this._DD_CharacterHasActions;
			}
			set
			{
				this._DD_CharacterHasActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Action", Storage="_DD_Class", ThisKey="ClassID", OtherKey="ID", IsForeignKey=true)]
		public DD_Class DD_Class
		{
			get
			{
				return this._DD_Class.Entity;
			}
			set
			{
				DD_Class previousValue = this._DD_Class.Entity;
				if (((previousValue != value) 
							|| (this._DD_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Class.Entity = null;
						previousValue.DD_Actions.Remove(this);
					}
					this._DD_Class.Entity = value;
					if ((value != null))
					{
						value.DD_Actions.Add(this);
						this._ClassID = value.ID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("DD_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Action", Storage="_DD_Race", ThisKey="RaceID", OtherKey="ID", IsForeignKey=true)]
		public DD_Race DD_Race
		{
			get
			{
				return this._DD_Race.Entity;
			}
			set
			{
				DD_Race previousValue = this._DD_Race.Entity;
				if (((previousValue != value) 
							|| (this._DD_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Race.Entity = null;
						previousValue.DD_Actions.Remove(this);
					}
					this._DD_Race.Entity = value;
					if ((value != null))
					{
						value.DD_Actions.Add(this);
						this._RaceID = value.ID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("DD_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasActions(DD_CharacterHasAction entity)
		{
			this.SendPropertyChanging();
			entity.DD_Action = this;
		}
		
		private void detach_DD_CharacterHasActions(DD_CharacterHasAction entity)
		{
			this.SendPropertyChanging();
			entity.DD_Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_User")]
	public partial class DD_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<DD_Character> _DD_Characters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public DD_User()
		{
			this._DD_Characters = new EntitySet<DD_Character>(new Action<DD_Character>(this.attach_DD_Characters), new Action<DD_Character>(this.detach_DD_Characters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_User_DD_Character", Storage="_DD_Characters", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DD_Character> DD_Characters
		{
			get
			{
				return this._DD_Characters;
			}
			set
			{
				this._DD_Characters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_User = this;
		}
		
		private void detach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Adventure")]
	public partial class DD_Adventure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Campaign;
		
		private EntitySet<DD_CharacterHasAdventure> _DD_CharacterHasAdventures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCampaignChanging(string value);
    partial void OnCampaignChanged();
    #endregion
		
		public DD_Adventure()
		{
			this._DD_CharacterHasAdventures = new EntitySet<DD_CharacterHasAdventure>(new Action<DD_CharacterHasAdventure>(this.attach_DD_CharacterHasAdventures), new Action<DD_CharacterHasAdventure>(this.detach_DD_CharacterHasAdventures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Campaign", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Campaign
		{
			get
			{
				return this._Campaign;
			}
			set
			{
				if ((this._Campaign != value))
				{
					this.OnCampaignChanging(value);
					this.SendPropertyChanging();
					this._Campaign = value;
					this.SendPropertyChanged("Campaign");
					this.OnCampaignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Adventure_DD_CharacterHasAdventure", Storage="_DD_CharacterHasAdventures", ThisKey="ID", OtherKey="AdventureID")]
		public EntitySet<DD_CharacterHasAdventure> DD_CharacterHasAdventures
		{
			get
			{
				return this._DD_CharacterHasAdventures;
			}
			set
			{
				this._DD_CharacterHasAdventures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasAdventures(DD_CharacterHasAdventure entity)
		{
			this.SendPropertyChanging();
			entity.DD_Adventure = this;
		}
		
		private void detach_DD_CharacterHasAdventures(DD_CharacterHasAdventure entity)
		{
			this.SendPropertyChanging();
			entity.DD_Adventure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Beastiary")]
	public partial class DD_Beastiary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _CreepID;
		
		private bool _HasSeen;
		
		private EntityRef<DD_Character> _DD_Character;
		
		private EntityRef<DD_Creep> _DD_Creep;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnCreepIDChanging(int value);
    partial void OnCreepIDChanged();
    partial void OnHasSeenChanging(bool value);
    partial void OnHasSeenChanged();
    #endregion
		
		public DD_Beastiary()
		{
			this._DD_Character = default(EntityRef<DD_Character>);
			this._DD_Creep = default(EntityRef<DD_Creep>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreepID", DbType="Int NOT NULL")]
		public int CreepID
		{
			get
			{
				return this._CreepID;
			}
			set
			{
				if ((this._CreepID != value))
				{
					if (this._DD_Creep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreepIDChanging(value);
					this.SendPropertyChanging();
					this._CreepID = value;
					this.SendPropertyChanged("CreepID");
					this.OnCreepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasSeen", DbType="Bit NOT NULL")]
		public bool HasSeen
		{
			get
			{
				return this._HasSeen;
			}
			set
			{
				if ((this._HasSeen != value))
				{
					this.OnHasSeenChanging(value);
					this.SendPropertyChanging();
					this._HasSeen = value;
					this.SendPropertyChanged("HasSeen");
					this.OnHasSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_Beastiary", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_Beastiaries.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_Beastiaries.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Creep_DD_Beastiary", Storage="_DD_Creep", ThisKey="CreepID", OtherKey="ID", IsForeignKey=true)]
		public DD_Creep DD_Creep
		{
			get
			{
				return this._DD_Creep.Entity;
			}
			set
			{
				DD_Creep previousValue = this._DD_Creep.Entity;
				if (((previousValue != value) 
							|| (this._DD_Creep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Creep.Entity = null;
						previousValue.DD_Beastiaries.Remove(this);
					}
					this._DD_Creep.Entity = value;
					if ((value != null))
					{
						value.DD_Beastiaries.Add(this);
						this._CreepID = value.ID;
					}
					else
					{
						this._CreepID = default(int);
					}
					this.SendPropertyChanged("DD_Creep");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Character")]
	public partial class DD_Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _CharacterName;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _LastPlayed;
		
		private int _RaceID;
		
		private int _ClassID;
		
		private int _CharacterLevel;
		
		private int _MaxHitPoints;
		
		private int _TempHitPoints;
		
		private int _Strength;
		
		private int _Dexterity;
		
		private int _Constitution;
		
		private int _Intelligence;
		
		private int _Wisdom;
		
		private int _Charisma;
		
		private int _ArmorClass;
		
		private int _StrengthModifier;
		
		private int _DexterityModifier;
		
		private int _ConstitutionModifer;
		
		private int _IntelligenceModifier;
		
		private int _WisdomModifier;
		
		private int _CharismaModifier;
		
		private int _StrengthSavingThrow;
		
		private int _DexteritySavingThrow;
		
		private int _ConstitutinSavingThrow;
		
		private int _IntelligenceSavingThrow;
		
		private int _WisdomSavingThrow;
		
		private int _CharismaSavingThrow;
		
		private string _Background;
		
		private string _Faction;
		
		private string _Alignment;
		
		private System.Nullable<int> _ExperiencePoints;
		
		private EntitySet<DD_Beastiary> _DD_Beastiaries;
		
		private EntitySet<DD_CharacterHasAction> _DD_CharacterHasActions;
		
		private EntitySet<DD_CharacterHasAdventure> _DD_CharacterHasAdventures;
		
		private EntitySet<DD_CharacterHasItem> _DD_CharacterHasItems;
		
		private EntitySet<DD_CharacterHasPack> _DD_CharacterHasPacks;
		
		private EntitySet<DD_CharacterHasSkill> _DD_CharacterHasSkills;
		
		private EntitySet<DD_CharacterHasSpell> _DD_CharacterHasSpells;
		
		private EntityRef<DD_User> _DD_User;
		
		private EntityRef<DD_Class> _DD_Class;
		
		private EntityRef<DD_Race> _DD_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCharacterNameChanging(string value);
    partial void OnCharacterNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnLastPlayedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPlayedChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnCharacterLevelChanging(int value);
    partial void OnCharacterLevelChanged();
    partial void OnMaxHitPointsChanging(int value);
    partial void OnMaxHitPointsChanged();
    partial void OnTempHitPointsChanging(int value);
    partial void OnTempHitPointsChanged();
    partial void OnStrengthChanging(int value);
    partial void OnStrengthChanged();
    partial void OnDexterityChanging(int value);
    partial void OnDexterityChanged();
    partial void OnConstitutionChanging(int value);
    partial void OnConstitutionChanged();
    partial void OnIntelligenceChanging(int value);
    partial void OnIntelligenceChanged();
    partial void OnWisdomChanging(int value);
    partial void OnWisdomChanged();
    partial void OnCharismaChanging(int value);
    partial void OnCharismaChanged();
    partial void OnArmorClassChanging(int value);
    partial void OnArmorClassChanged();
    partial void OnStrengthModifierChanging(int value);
    partial void OnStrengthModifierChanged();
    partial void OnDexterityModifierChanging(int value);
    partial void OnDexterityModifierChanged();
    partial void OnConstitutionModiferChanging(int value);
    partial void OnConstitutionModiferChanged();
    partial void OnIntelligenceModifierChanging(int value);
    partial void OnIntelligenceModifierChanged();
    partial void OnWisdomModifierChanging(int value);
    partial void OnWisdomModifierChanged();
    partial void OnCharismaModifierChanging(int value);
    partial void OnCharismaModifierChanged();
    partial void OnStrengthSavingThrowChanging(int value);
    partial void OnStrengthSavingThrowChanged();
    partial void OnDexteritySavingThrowChanging(int value);
    partial void OnDexteritySavingThrowChanged();
    partial void OnConstitutinSavingThrowChanging(int value);
    partial void OnConstitutinSavingThrowChanged();
    partial void OnIntelligenceSavingThrowChanging(int value);
    partial void OnIntelligenceSavingThrowChanged();
    partial void OnWisdomSavingThrowChanging(int value);
    partial void OnWisdomSavingThrowChanged();
    partial void OnCharismaSavingThrowChanging(int value);
    partial void OnCharismaSavingThrowChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    partial void OnFactionChanging(string value);
    partial void OnFactionChanged();
    partial void OnAlignmentChanging(string value);
    partial void OnAlignmentChanged();
    partial void OnExperiencePointsChanging(System.Nullable<int> value);
    partial void OnExperiencePointsChanged();
    #endregion
		
		public DD_Character()
		{
			this._DD_Beastiaries = new EntitySet<DD_Beastiary>(new Action<DD_Beastiary>(this.attach_DD_Beastiaries), new Action<DD_Beastiary>(this.detach_DD_Beastiaries));
			this._DD_CharacterHasActions = new EntitySet<DD_CharacterHasAction>(new Action<DD_CharacterHasAction>(this.attach_DD_CharacterHasActions), new Action<DD_CharacterHasAction>(this.detach_DD_CharacterHasActions));
			this._DD_CharacterHasAdventures = new EntitySet<DD_CharacterHasAdventure>(new Action<DD_CharacterHasAdventure>(this.attach_DD_CharacterHasAdventures), new Action<DD_CharacterHasAdventure>(this.detach_DD_CharacterHasAdventures));
			this._DD_CharacterHasItems = new EntitySet<DD_CharacterHasItem>(new Action<DD_CharacterHasItem>(this.attach_DD_CharacterHasItems), new Action<DD_CharacterHasItem>(this.detach_DD_CharacterHasItems));
			this._DD_CharacterHasPacks = new EntitySet<DD_CharacterHasPack>(new Action<DD_CharacterHasPack>(this.attach_DD_CharacterHasPacks), new Action<DD_CharacterHasPack>(this.detach_DD_CharacterHasPacks));
			this._DD_CharacterHasSkills = new EntitySet<DD_CharacterHasSkill>(new Action<DD_CharacterHasSkill>(this.attach_DD_CharacterHasSkills), new Action<DD_CharacterHasSkill>(this.detach_DD_CharacterHasSkills));
			this._DD_CharacterHasSpells = new EntitySet<DD_CharacterHasSpell>(new Action<DD_CharacterHasSpell>(this.attach_DD_CharacterHasSpells), new Action<DD_CharacterHasSpell>(this.detach_DD_CharacterHasSpells));
			this._DD_User = default(EntityRef<DD_User>);
			this._DD_Class = default(EntityRef<DD_Class>);
			this._DD_Race = default(EntityRef<DD_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._DD_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CharacterName
		{
			get
			{
				return this._CharacterName;
			}
			set
			{
				if ((this._CharacterName != value))
				{
					this.OnCharacterNameChanging(value);
					this.SendPropertyChanging();
					this._CharacterName = value;
					this.SendPropertyChanged("CharacterName");
					this.OnCharacterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPlayed", DbType="Date")]
		public System.Nullable<System.DateTime> LastPlayed
		{
			get
			{
				return this._LastPlayed;
			}
			set
			{
				if ((this._LastPlayed != value))
				{
					this.OnLastPlayedChanging(value);
					this.SendPropertyChanging();
					this._LastPlayed = value;
					this.SendPropertyChanged("LastPlayed");
					this.OnLastPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._DD_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._DD_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterLevel", DbType="Int NOT NULL")]
		public int CharacterLevel
		{
			get
			{
				return this._CharacterLevel;
			}
			set
			{
				if ((this._CharacterLevel != value))
				{
					this.OnCharacterLevelChanging(value);
					this.SendPropertyChanging();
					this._CharacterLevel = value;
					this.SendPropertyChanged("CharacterLevel");
					this.OnCharacterLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxHitPoints", DbType="Int NOT NULL")]
		public int MaxHitPoints
		{
			get
			{
				return this._MaxHitPoints;
			}
			set
			{
				if ((this._MaxHitPoints != value))
				{
					this.OnMaxHitPointsChanging(value);
					this.SendPropertyChanging();
					this._MaxHitPoints = value;
					this.SendPropertyChanged("MaxHitPoints");
					this.OnMaxHitPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempHitPoints", DbType="Int NOT NULL")]
		public int TempHitPoints
		{
			get
			{
				return this._TempHitPoints;
			}
			set
			{
				if ((this._TempHitPoints != value))
				{
					this.OnTempHitPointsChanging(value);
					this.SendPropertyChanging();
					this._TempHitPoints = value;
					this.SendPropertyChanged("TempHitPoints");
					this.OnTempHitPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="Int NOT NULL")]
		public int Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dexterity", DbType="Int NOT NULL")]
		public int Dexterity
		{
			get
			{
				return this._Dexterity;
			}
			set
			{
				if ((this._Dexterity != value))
				{
					this.OnDexterityChanging(value);
					this.SendPropertyChanging();
					this._Dexterity = value;
					this.SendPropertyChanged("Dexterity");
					this.OnDexterityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Constitution", DbType="Int NOT NULL")]
		public int Constitution
		{
			get
			{
				return this._Constitution;
			}
			set
			{
				if ((this._Constitution != value))
				{
					this.OnConstitutionChanging(value);
					this.SendPropertyChanging();
					this._Constitution = value;
					this.SendPropertyChanged("Constitution");
					this.OnConstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intelligence", DbType="Int NOT NULL")]
		public int Intelligence
		{
			get
			{
				return this._Intelligence;
			}
			set
			{
				if ((this._Intelligence != value))
				{
					this.OnIntelligenceChanging(value);
					this.SendPropertyChanging();
					this._Intelligence = value;
					this.SendPropertyChanged("Intelligence");
					this.OnIntelligenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wisdom", DbType="Int NOT NULL")]
		public int Wisdom
		{
			get
			{
				return this._Wisdom;
			}
			set
			{
				if ((this._Wisdom != value))
				{
					this.OnWisdomChanging(value);
					this.SendPropertyChanging();
					this._Wisdom = value;
					this.SendPropertyChanged("Wisdom");
					this.OnWisdomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charisma", DbType="Int NOT NULL")]
		public int Charisma
		{
			get
			{
				return this._Charisma;
			}
			set
			{
				if ((this._Charisma != value))
				{
					this.OnCharismaChanging(value);
					this.SendPropertyChanging();
					this._Charisma = value;
					this.SendPropertyChanged("Charisma");
					this.OnCharismaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArmorClass", DbType="Int NOT NULL")]
		public int ArmorClass
		{
			get
			{
				return this._ArmorClass;
			}
			set
			{
				if ((this._ArmorClass != value))
				{
					this.OnArmorClassChanging(value);
					this.SendPropertyChanging();
					this._ArmorClass = value;
					this.SendPropertyChanged("ArmorClass");
					this.OnArmorClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrengthModifier", DbType="Int NOT NULL")]
		public int StrengthModifier
		{
			get
			{
				return this._StrengthModifier;
			}
			set
			{
				if ((this._StrengthModifier != value))
				{
					this.OnStrengthModifierChanging(value);
					this.SendPropertyChanging();
					this._StrengthModifier = value;
					this.SendPropertyChanged("StrengthModifier");
					this.OnStrengthModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DexterityModifier", DbType="Int NOT NULL")]
		public int DexterityModifier
		{
			get
			{
				return this._DexterityModifier;
			}
			set
			{
				if ((this._DexterityModifier != value))
				{
					this.OnDexterityModifierChanging(value);
					this.SendPropertyChanging();
					this._DexterityModifier = value;
					this.SendPropertyChanged("DexterityModifier");
					this.OnDexterityModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstitutionModifer", DbType="Int NOT NULL")]
		public int ConstitutionModifer
		{
			get
			{
				return this._ConstitutionModifer;
			}
			set
			{
				if ((this._ConstitutionModifer != value))
				{
					this.OnConstitutionModiferChanging(value);
					this.SendPropertyChanging();
					this._ConstitutionModifer = value;
					this.SendPropertyChanged("ConstitutionModifer");
					this.OnConstitutionModiferChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntelligenceModifier", DbType="Int NOT NULL")]
		public int IntelligenceModifier
		{
			get
			{
				return this._IntelligenceModifier;
			}
			set
			{
				if ((this._IntelligenceModifier != value))
				{
					this.OnIntelligenceModifierChanging(value);
					this.SendPropertyChanging();
					this._IntelligenceModifier = value;
					this.SendPropertyChanged("IntelligenceModifier");
					this.OnIntelligenceModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WisdomModifier", DbType="Int NOT NULL")]
		public int WisdomModifier
		{
			get
			{
				return this._WisdomModifier;
			}
			set
			{
				if ((this._WisdomModifier != value))
				{
					this.OnWisdomModifierChanging(value);
					this.SendPropertyChanging();
					this._WisdomModifier = value;
					this.SendPropertyChanged("WisdomModifier");
					this.OnWisdomModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharismaModifier", DbType="Int NOT NULL")]
		public int CharismaModifier
		{
			get
			{
				return this._CharismaModifier;
			}
			set
			{
				if ((this._CharismaModifier != value))
				{
					this.OnCharismaModifierChanging(value);
					this.SendPropertyChanging();
					this._CharismaModifier = value;
					this.SendPropertyChanged("CharismaModifier");
					this.OnCharismaModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrengthSavingThrow", DbType="Int NOT NULL")]
		public int StrengthSavingThrow
		{
			get
			{
				return this._StrengthSavingThrow;
			}
			set
			{
				if ((this._StrengthSavingThrow != value))
				{
					this.OnStrengthSavingThrowChanging(value);
					this.SendPropertyChanging();
					this._StrengthSavingThrow = value;
					this.SendPropertyChanged("StrengthSavingThrow");
					this.OnStrengthSavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DexteritySavingThrow", DbType="Int NOT NULL")]
		public int DexteritySavingThrow
		{
			get
			{
				return this._DexteritySavingThrow;
			}
			set
			{
				if ((this._DexteritySavingThrow != value))
				{
					this.OnDexteritySavingThrowChanging(value);
					this.SendPropertyChanging();
					this._DexteritySavingThrow = value;
					this.SendPropertyChanged("DexteritySavingThrow");
					this.OnDexteritySavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstitutinSavingThrow", DbType="Int NOT NULL")]
		public int ConstitutinSavingThrow
		{
			get
			{
				return this._ConstitutinSavingThrow;
			}
			set
			{
				if ((this._ConstitutinSavingThrow != value))
				{
					this.OnConstitutinSavingThrowChanging(value);
					this.SendPropertyChanging();
					this._ConstitutinSavingThrow = value;
					this.SendPropertyChanged("ConstitutinSavingThrow");
					this.OnConstitutinSavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntelligenceSavingThrow", DbType="Int NOT NULL")]
		public int IntelligenceSavingThrow
		{
			get
			{
				return this._IntelligenceSavingThrow;
			}
			set
			{
				if ((this._IntelligenceSavingThrow != value))
				{
					this.OnIntelligenceSavingThrowChanging(value);
					this.SendPropertyChanging();
					this._IntelligenceSavingThrow = value;
					this.SendPropertyChanged("IntelligenceSavingThrow");
					this.OnIntelligenceSavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WisdomSavingThrow", DbType="Int NOT NULL")]
		public int WisdomSavingThrow
		{
			get
			{
				return this._WisdomSavingThrow;
			}
			set
			{
				if ((this._WisdomSavingThrow != value))
				{
					this.OnWisdomSavingThrowChanging(value);
					this.SendPropertyChanging();
					this._WisdomSavingThrow = value;
					this.SendPropertyChanged("WisdomSavingThrow");
					this.OnWisdomSavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharismaSavingThrow", DbType="Int NOT NULL")]
		public int CharismaSavingThrow
		{
			get
			{
				return this._CharismaSavingThrow;
			}
			set
			{
				if ((this._CharismaSavingThrow != value))
				{
					this.OnCharismaSavingThrowChanging(value);
					this.SendPropertyChanging();
					this._CharismaSavingThrow = value;
					this.SendPropertyChanged("CharismaSavingThrow");
					this.OnCharismaSavingThrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="VarChar(255)")]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Faction", DbType="VarChar(255)")]
		public string Faction
		{
			get
			{
				return this._Faction;
			}
			set
			{
				if ((this._Faction != value))
				{
					this.OnFactionChanging(value);
					this.SendPropertyChanging();
					this._Faction = value;
					this.SendPropertyChanged("Faction");
					this.OnFactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alignment", DbType="VarChar(255)")]
		public string Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				if ((this._Alignment != value))
				{
					this.OnAlignmentChanging(value);
					this.SendPropertyChanging();
					this._Alignment = value;
					this.SendPropertyChanged("Alignment");
					this.OnAlignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperiencePoints", DbType="Int")]
		public System.Nullable<int> ExperiencePoints
		{
			get
			{
				return this._ExperiencePoints;
			}
			set
			{
				if ((this._ExperiencePoints != value))
				{
					this.OnExperiencePointsChanging(value);
					this.SendPropertyChanging();
					this._ExperiencePoints = value;
					this.SendPropertyChanged("ExperiencePoints");
					this.OnExperiencePointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_Beastiary", Storage="_DD_Beastiaries", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_Beastiary> DD_Beastiaries
		{
			get
			{
				return this._DD_Beastiaries;
			}
			set
			{
				this._DD_Beastiaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasAction", Storage="_DD_CharacterHasActions", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasAction> DD_CharacterHasActions
		{
			get
			{
				return this._DD_CharacterHasActions;
			}
			set
			{
				this._DD_CharacterHasActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasAdventure", Storage="_DD_CharacterHasAdventures", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasAdventure> DD_CharacterHasAdventures
		{
			get
			{
				return this._DD_CharacterHasAdventures;
			}
			set
			{
				this._DD_CharacterHasAdventures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasItem", Storage="_DD_CharacterHasItems", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasItem> DD_CharacterHasItems
		{
			get
			{
				return this._DD_CharacterHasItems;
			}
			set
			{
				this._DD_CharacterHasItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasPack", Storage="_DD_CharacterHasPacks", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasPack> DD_CharacterHasPacks
		{
			get
			{
				return this._DD_CharacterHasPacks;
			}
			set
			{
				this._DD_CharacterHasPacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasSkill", Storage="_DD_CharacterHasSkills", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasSkill> DD_CharacterHasSkills
		{
			get
			{
				return this._DD_CharacterHasSkills;
			}
			set
			{
				this._DD_CharacterHasSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasSpell", Storage="_DD_CharacterHasSpells", ThisKey="ID", OtherKey="CharacterID")]
		public EntitySet<DD_CharacterHasSpell> DD_CharacterHasSpells
		{
			get
			{
				return this._DD_CharacterHasSpells;
			}
			set
			{
				this._DD_CharacterHasSpells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_User_DD_Character", Storage="_DD_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public DD_User DD_User
		{
			get
			{
				return this._DD_User.Entity;
			}
			set
			{
				DD_User previousValue = this._DD_User.Entity;
				if (((previousValue != value) 
							|| (this._DD_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_User.Entity = null;
						previousValue.DD_Characters.Remove(this);
					}
					this._DD_User.Entity = value;
					if ((value != null))
					{
						value.DD_Characters.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("DD_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Character", Storage="_DD_Class", ThisKey="ClassID", OtherKey="ID", IsForeignKey=true)]
		public DD_Class DD_Class
		{
			get
			{
				return this._DD_Class.Entity;
			}
			set
			{
				DD_Class previousValue = this._DD_Class.Entity;
				if (((previousValue != value) 
							|| (this._DD_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Class.Entity = null;
						previousValue.DD_Characters.Remove(this);
					}
					this._DD_Class.Entity = value;
					if ((value != null))
					{
						value.DD_Characters.Add(this);
						this._ClassID = value.ID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("DD_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Character", Storage="_DD_Race", ThisKey="RaceID", OtherKey="ID", IsForeignKey=true)]
		public DD_Race DD_Race
		{
			get
			{
				return this._DD_Race.Entity;
			}
			set
			{
				DD_Race previousValue = this._DD_Race.Entity;
				if (((previousValue != value) 
							|| (this._DD_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Race.Entity = null;
						previousValue.DD_Characters.Remove(this);
					}
					this._DD_Race.Entity = value;
					if ((value != null))
					{
						value.DD_Characters.Add(this);
						this._RaceID = value.ID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("DD_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_Beastiaries(DD_Beastiary entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_Beastiaries(DD_Beastiary entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasActions(DD_CharacterHasAction entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasActions(DD_CharacterHasAction entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasAdventures(DD_CharacterHasAdventure entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasAdventures(DD_CharacterHasAdventure entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasItems(DD_CharacterHasItem entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasItems(DD_CharacterHasItem entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasPacks(DD_CharacterHasPack entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasPacks(DD_CharacterHasPack entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasSkills(DD_CharacterHasSkill entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasSkills(DD_CharacterHasSkill entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
		
		private void attach_DD_CharacterHasSpells(DD_CharacterHasSpell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = this;
		}
		
		private void detach_DD_CharacterHasSpells(DD_CharacterHasSpell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Character = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasAction")]
	public partial class DD_CharacterHasAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _ActionID;
		
		private EntityRef<DD_Action> _DD_Action;
		
		private EntityRef<DD_Character> _DD_Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    #endregion
		
		public DD_CharacterHasAction()
		{
			this._DD_Action = default(EntityRef<DD_Action>);
			this._DD_Character = default(EntityRef<DD_Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL")]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._DD_Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Action_DD_CharacterHasAction", Storage="_DD_Action", ThisKey="ActionID", OtherKey="ID", IsForeignKey=true)]
		public DD_Action DD_Action
		{
			get
			{
				return this._DD_Action.Entity;
			}
			set
			{
				DD_Action previousValue = this._DD_Action.Entity;
				if (((previousValue != value) 
							|| (this._DD_Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Action.Entity = null;
						previousValue.DD_CharacterHasActions.Remove(this);
					}
					this._DD_Action.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasActions.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("DD_Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasAction", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasActions.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasActions.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasAdventure")]
	public partial class DD_CharacterHasAdventure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _AdventureID;
		
		private int _StartDate;
		
		private bool _IsComplete;
		
		private string _DungeonMaster;
		
		private EntityRef<DD_Adventure> _DD_Adventure;
		
		private EntityRef<DD_Character> _DD_Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnAdventureIDChanging(int value);
    partial void OnAdventureIDChanged();
    partial void OnStartDateChanging(int value);
    partial void OnStartDateChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnDungeonMasterChanging(string value);
    partial void OnDungeonMasterChanged();
    #endregion
		
		public DD_CharacterHasAdventure()
		{
			this._DD_Adventure = default(EntityRef<DD_Adventure>);
			this._DD_Character = default(EntityRef<DD_Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdventureID", DbType="Int NOT NULL")]
		public int AdventureID
		{
			get
			{
				return this._AdventureID;
			}
			set
			{
				if ((this._AdventureID != value))
				{
					if (this._DD_Adventure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdventureIDChanging(value);
					this.SendPropertyChanging();
					this._AdventureID = value;
					this.SendPropertyChanged("AdventureID");
					this.OnAdventureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Int NOT NULL")]
		public int StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DungeonMaster", DbType="VarChar(50)")]
		public string DungeonMaster
		{
			get
			{
				return this._DungeonMaster;
			}
			set
			{
				if ((this._DungeonMaster != value))
				{
					this.OnDungeonMasterChanging(value);
					this.SendPropertyChanging();
					this._DungeonMaster = value;
					this.SendPropertyChanged("DungeonMaster");
					this.OnDungeonMasterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Adventure_DD_CharacterHasAdventure", Storage="_DD_Adventure", ThisKey="AdventureID", OtherKey="ID", IsForeignKey=true)]
		public DD_Adventure DD_Adventure
		{
			get
			{
				return this._DD_Adventure.Entity;
			}
			set
			{
				DD_Adventure previousValue = this._DD_Adventure.Entity;
				if (((previousValue != value) 
							|| (this._DD_Adventure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Adventure.Entity = null;
						previousValue.DD_CharacterHasAdventures.Remove(this);
					}
					this._DD_Adventure.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasAdventures.Add(this);
						this._AdventureID = value.ID;
					}
					else
					{
						this._AdventureID = default(int);
					}
					this.SendPropertyChanged("DD_Adventure");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasAdventure", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasAdventures.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasAdventures.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasItem")]
	public partial class DD_CharacterHasItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _ItemID;
		
		private int _Quantity;
		
		private System.Nullable<int> _CurrentDurability;
		
		private EntityRef<DD_Character> _DD_Character;
		
		private EntityRef<DD_Item> _DD_Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCurrentDurabilityChanging(System.Nullable<int> value);
    partial void OnCurrentDurabilityChanged();
    #endregion
		
		public DD_CharacterHasItem()
		{
			this._DD_Character = default(EntityRef<DD_Character>);
			this._DD_Item = default(EntityRef<DD_Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._DD_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentDurability", DbType="Int")]
		public System.Nullable<int> CurrentDurability
		{
			get
			{
				return this._CurrentDurability;
			}
			set
			{
				if ((this._CurrentDurability != value))
				{
					this.OnCurrentDurabilityChanging(value);
					this.SendPropertyChanging();
					this._CurrentDurability = value;
					this.SendPropertyChanged("CurrentDurability");
					this.OnCurrentDurabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasItem", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasItems.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasItems.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Item_DD_CharacterHasItem", Storage="_DD_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public DD_Item DD_Item
		{
			get
			{
				return this._DD_Item.Entity;
			}
			set
			{
				DD_Item previousValue = this._DD_Item.Entity;
				if (((previousValue != value) 
							|| (this._DD_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Item.Entity = null;
						previousValue.DD_CharacterHasItems.Remove(this);
					}
					this._DD_Item.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasItems.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("DD_Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasPack")]
	public partial class DD_CharacterHasPack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _PackID;
		
		private int _CurrentCapacity;
		
		private EntityRef<DD_Character> _DD_Character;
		
		private EntityRef<DD_Pack> _DD_Pack;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnPackIDChanging(int value);
    partial void OnPackIDChanged();
    partial void OnCurrentCapacityChanging(int value);
    partial void OnCurrentCapacityChanged();
    #endregion
		
		public DD_CharacterHasPack()
		{
			this._DD_Character = default(EntityRef<DD_Character>);
			this._DD_Pack = default(EntityRef<DD_Pack>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackID", DbType="Int NOT NULL")]
		public int PackID
		{
			get
			{
				return this._PackID;
			}
			set
			{
				if ((this._PackID != value))
				{
					if (this._DD_Pack.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackIDChanging(value);
					this.SendPropertyChanging();
					this._PackID = value;
					this.SendPropertyChanged("PackID");
					this.OnPackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCapacity", DbType="Int NOT NULL")]
		public int CurrentCapacity
		{
			get
			{
				return this._CurrentCapacity;
			}
			set
			{
				if ((this._CurrentCapacity != value))
				{
					this.OnCurrentCapacityChanging(value);
					this.SendPropertyChanging();
					this._CurrentCapacity = value;
					this.SendPropertyChanged("CurrentCapacity");
					this.OnCurrentCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasPack", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasPacks.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasPacks.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Pack_DD_CharacterHasPack", Storage="_DD_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
		public DD_Pack DD_Pack
		{
			get
			{
				return this._DD_Pack.Entity;
			}
			set
			{
				DD_Pack previousValue = this._DD_Pack.Entity;
				if (((previousValue != value) 
							|| (this._DD_Pack.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Pack.Entity = null;
						previousValue.DD_CharacterHasPacks.Remove(this);
					}
					this._DD_Pack.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasPacks.Add(this);
						this._PackID = value.ID;
					}
					else
					{
						this._PackID = default(int);
					}
					this.SendPropertyChanged("DD_Pack");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasSkill")]
	public partial class DD_CharacterHasSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _SkillID;
		
		private int _Value;
		
		private EntityRef<DD_Character> _DD_Character;
		
		private EntityRef<DD_Skill> _DD_Skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public DD_CharacterHasSkill()
		{
			this._DD_Character = default(EntityRef<DD_Character>);
			this._DD_Skill = default(EntityRef<DD_Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int NOT NULL")]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					if (this._DD_Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasSkill", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasSkills.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasSkills.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Skill_DD_CharacterHasSkill", Storage="_DD_Skill", ThisKey="SkillID", OtherKey="ID", IsForeignKey=true)]
		public DD_Skill DD_Skill
		{
			get
			{
				return this._DD_Skill.Entity;
			}
			set
			{
				DD_Skill previousValue = this._DD_Skill.Entity;
				if (((previousValue != value) 
							|| (this._DD_Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Skill.Entity = null;
						previousValue.DD_CharacterHasSkills.Remove(this);
					}
					this._DD_Skill.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasSkills.Add(this);
						this._SkillID = value.ID;
					}
					else
					{
						this._SkillID = default(int);
					}
					this.SendPropertyChanged("DD_Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_CharacterHasSpell")]
	public partial class DD_CharacterHasSpell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CharacterID;
		
		private int _SpellID;
		
		private EntityRef<DD_Character> _DD_Character;
		
		private EntityRef<DD_Spell> _DD_Spell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnSpellIDChanging(int value);
    partial void OnSpellIDChanged();
    #endregion
		
		public DD_CharacterHasSpell()
		{
			this._DD_Character = default(EntityRef<DD_Character>);
			this._DD_Spell = default(EntityRef<DD_Spell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._DD_Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpellID", DbType="Int NOT NULL")]
		public int SpellID
		{
			get
			{
				return this._SpellID;
			}
			set
			{
				if ((this._SpellID != value))
				{
					if (this._DD_Spell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpellIDChanging(value);
					this.SendPropertyChanging();
					this._SpellID = value;
					this.SendPropertyChanged("SpellID");
					this.OnSpellIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Character_DD_CharacterHasSpell", Storage="_DD_Character", ThisKey="CharacterID", OtherKey="ID", IsForeignKey=true)]
		public DD_Character DD_Character
		{
			get
			{
				return this._DD_Character.Entity;
			}
			set
			{
				DD_Character previousValue = this._DD_Character.Entity;
				if (((previousValue != value) 
							|| (this._DD_Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Character.Entity = null;
						previousValue.DD_CharacterHasSpells.Remove(this);
					}
					this._DD_Character.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasSpells.Add(this);
						this._CharacterID = value.ID;
					}
					else
					{
						this._CharacterID = default(int);
					}
					this.SendPropertyChanged("DD_Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Spell_DD_CharacterHasSpell", Storage="_DD_Spell", ThisKey="SpellID", OtherKey="ID", IsForeignKey=true)]
		public DD_Spell DD_Spell
		{
			get
			{
				return this._DD_Spell.Entity;
			}
			set
			{
				DD_Spell previousValue = this._DD_Spell.Entity;
				if (((previousValue != value) 
							|| (this._DD_Spell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Spell.Entity = null;
						previousValue.DD_CharacterHasSpells.Remove(this);
					}
					this._DD_Spell.Entity = value;
					if ((value != null))
					{
						value.DD_CharacterHasSpells.Add(this);
						this._SpellID = value.ID;
					}
					else
					{
						this._SpellID = default(int);
					}
					this.SendPropertyChanged("DD_Spell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Class")]
	public partial class DD_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DD_Action> _DD_Actions;
		
		private EntitySet<DD_Character> _DD_Characters;
		
		private EntitySet<DD_Spell> _DD_Spells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DD_Class()
		{
			this._DD_Actions = new EntitySet<DD_Action>(new Action<DD_Action>(this.attach_DD_Actions), new Action<DD_Action>(this.detach_DD_Actions));
			this._DD_Characters = new EntitySet<DD_Character>(new Action<DD_Character>(this.attach_DD_Characters), new Action<DD_Character>(this.detach_DD_Characters));
			this._DD_Spells = new EntitySet<DD_Spell>(new Action<DD_Spell>(this.attach_DD_Spells), new Action<DD_Spell>(this.detach_DD_Spells));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Action", Storage="_DD_Actions", ThisKey="ID", OtherKey="ClassID")]
		public EntitySet<DD_Action> DD_Actions
		{
			get
			{
				return this._DD_Actions;
			}
			set
			{
				this._DD_Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Character", Storage="_DD_Characters", ThisKey="ID", OtherKey="ClassID")]
		public EntitySet<DD_Character> DD_Characters
		{
			get
			{
				return this._DD_Characters;
			}
			set
			{
				this._DD_Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Spell", Storage="_DD_Spells", ThisKey="ID", OtherKey="ClassID")]
		public EntitySet<DD_Spell> DD_Spells
		{
			get
			{
				return this._DD_Spells;
			}
			set
			{
				this._DD_Spells.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_Actions(DD_Action entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = this;
		}
		
		private void detach_DD_Actions(DD_Action entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = null;
		}
		
		private void attach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = this;
		}
		
		private void detach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = null;
		}
		
		private void attach_DD_Spells(DD_Spell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = this;
		}
		
		private void detach_DD_Spells(DD_Spell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Creep")]
	public partial class DD_Creep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DD_Beastiary> _DD_Beastiaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DD_Creep()
		{
			this._DD_Beastiaries = new EntitySet<DD_Beastiary>(new Action<DD_Beastiary>(this.attach_DD_Beastiaries), new Action<DD_Beastiary>(this.detach_DD_Beastiaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Creep_DD_Beastiary", Storage="_DD_Beastiaries", ThisKey="ID", OtherKey="CreepID")]
		public EntitySet<DD_Beastiary> DD_Beastiaries
		{
			get
			{
				return this._DD_Beastiaries;
			}
			set
			{
				this._DD_Beastiaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_Beastiaries(DD_Beastiary entity)
		{
			this.SendPropertyChanging();
			entity.DD_Creep = this;
		}
		
		private void detach_DD_Beastiaries(DD_Beastiary entity)
		{
			this.SendPropertyChanging();
			entity.DD_Creep = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Item")]
	public partial class DD_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _MaxDurability;
		
		private EntitySet<DD_CharacterHasItem> _DD_CharacterHasItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxDurabilityChanging(System.Nullable<int> value);
    partial void OnMaxDurabilityChanged();
    #endregion
		
		public DD_Item()
		{
			this._DD_CharacterHasItems = new EntitySet<DD_CharacterHasItem>(new Action<DD_CharacterHasItem>(this.attach_DD_CharacterHasItems), new Action<DD_CharacterHasItem>(this.detach_DD_CharacterHasItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDurability", DbType="Int")]
		public System.Nullable<int> MaxDurability
		{
			get
			{
				return this._MaxDurability;
			}
			set
			{
				if ((this._MaxDurability != value))
				{
					this.OnMaxDurabilityChanging(value);
					this.SendPropertyChanging();
					this._MaxDurability = value;
					this.SendPropertyChanged("MaxDurability");
					this.OnMaxDurabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Item_DD_CharacterHasItem", Storage="_DD_CharacterHasItems", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<DD_CharacterHasItem> DD_CharacterHasItems
		{
			get
			{
				return this._DD_CharacterHasItems;
			}
			set
			{
				this._DD_CharacterHasItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasItems(DD_CharacterHasItem entity)
		{
			this.SendPropertyChanging();
			entity.DD_Item = this;
		}
		
		private void detach_DD_CharacterHasItems(DD_CharacterHasItem entity)
		{
			this.SendPropertyChanging();
			entity.DD_Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Pack")]
	public partial class DD_Pack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _MaxCapacity;
		
		private EntitySet<DD_CharacterHasPack> _DD_CharacterHasPacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxCapacityChanging(int value);
    partial void OnMaxCapacityChanged();
    #endregion
		
		public DD_Pack()
		{
			this._DD_CharacterHasPacks = new EntitySet<DD_CharacterHasPack>(new Action<DD_CharacterHasPack>(this.attach_DD_CharacterHasPacks), new Action<DD_CharacterHasPack>(this.detach_DD_CharacterHasPacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxCapacity", DbType="Int NOT NULL")]
		public int MaxCapacity
		{
			get
			{
				return this._MaxCapacity;
			}
			set
			{
				if ((this._MaxCapacity != value))
				{
					this.OnMaxCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaxCapacity = value;
					this.SendPropertyChanged("MaxCapacity");
					this.OnMaxCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Pack_DD_CharacterHasPack", Storage="_DD_CharacterHasPacks", ThisKey="ID", OtherKey="PackID")]
		public EntitySet<DD_CharacterHasPack> DD_CharacterHasPacks
		{
			get
			{
				return this._DD_CharacterHasPacks;
			}
			set
			{
				this._DD_CharacterHasPacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasPacks(DD_CharacterHasPack entity)
		{
			this.SendPropertyChanging();
			entity.DD_Pack = this;
		}
		
		private void detach_DD_CharacterHasPacks(DD_CharacterHasPack entity)
		{
			this.SendPropertyChanging();
			entity.DD_Pack = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Race")]
	public partial class DD_Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DD_Action> _DD_Actions;
		
		private EntitySet<DD_Character> _DD_Characters;
		
		private EntitySet<DD_Spell> _DD_Spells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DD_Race()
		{
			this._DD_Actions = new EntitySet<DD_Action>(new Action<DD_Action>(this.attach_DD_Actions), new Action<DD_Action>(this.detach_DD_Actions));
			this._DD_Characters = new EntitySet<DD_Character>(new Action<DD_Character>(this.attach_DD_Characters), new Action<DD_Character>(this.detach_DD_Characters));
			this._DD_Spells = new EntitySet<DD_Spell>(new Action<DD_Spell>(this.attach_DD_Spells), new Action<DD_Spell>(this.detach_DD_Spells));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Action", Storage="_DD_Actions", ThisKey="ID", OtherKey="RaceID")]
		public EntitySet<DD_Action> DD_Actions
		{
			get
			{
				return this._DD_Actions;
			}
			set
			{
				this._DD_Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Character", Storage="_DD_Characters", ThisKey="ID", OtherKey="RaceID")]
		public EntitySet<DD_Character> DD_Characters
		{
			get
			{
				return this._DD_Characters;
			}
			set
			{
				this._DD_Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Spell", Storage="_DD_Spells", ThisKey="ID", OtherKey="RaceID")]
		public EntitySet<DD_Spell> DD_Spells
		{
			get
			{
				return this._DD_Spells;
			}
			set
			{
				this._DD_Spells.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_Actions(DD_Action entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = this;
		}
		
		private void detach_DD_Actions(DD_Action entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = null;
		}
		
		private void attach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = this;
		}
		
		private void detach_DD_Characters(DD_Character entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = null;
		}
		
		private void attach_DD_Spells(DD_Spell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = this;
		}
		
		private void detach_DD_Spells(DD_Spell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Skill")]
	public partial class DD_Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DD_CharacterHasSkill> _DD_CharacterHasSkills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DD_Skill()
		{
			this._DD_CharacterHasSkills = new EntitySet<DD_CharacterHasSkill>(new Action<DD_CharacterHasSkill>(this.attach_DD_CharacterHasSkills), new Action<DD_CharacterHasSkill>(this.detach_DD_CharacterHasSkills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Skill_DD_CharacterHasSkill", Storage="_DD_CharacterHasSkills", ThisKey="ID", OtherKey="SkillID")]
		public EntitySet<DD_CharacterHasSkill> DD_CharacterHasSkills
		{
			get
			{
				return this._DD_CharacterHasSkills;
			}
			set
			{
				this._DD_CharacterHasSkills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasSkills(DD_CharacterHasSkill entity)
		{
			this.SendPropertyChanging();
			entity.DD_Skill = this;
		}
		
		private void detach_DD_CharacterHasSkills(DD_CharacterHasSkill entity)
		{
			this.SendPropertyChanging();
			entity.DD_Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DD_Spell")]
	public partial class DD_Spell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _RaceID;
		
		private int _ClassID;
		
		private int _RequiredLevel;
		
		private System.Nullable<int> _ManaCost;
		
		private EntitySet<DD_CharacterHasSpell> _DD_CharacterHasSpells;
		
		private EntityRef<DD_Class> _DD_Class;
		
		private EntityRef<DD_Race> _DD_Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnRequiredLevelChanging(int value);
    partial void OnRequiredLevelChanged();
    partial void OnManaCostChanging(System.Nullable<int> value);
    partial void OnManaCostChanged();
    #endregion
		
		public DD_Spell()
		{
			this._DD_CharacterHasSpells = new EntitySet<DD_CharacterHasSpell>(new Action<DD_CharacterHasSpell>(this.attach_DD_CharacterHasSpells), new Action<DD_CharacterHasSpell>(this.detach_DD_CharacterHasSpells));
			this._DD_Class = default(EntityRef<DD_Class>);
			this._DD_Race = default(EntityRef<DD_Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._DD_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._DD_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredLevel", DbType="Int NOT NULL")]
		public int RequiredLevel
		{
			get
			{
				return this._RequiredLevel;
			}
			set
			{
				if ((this._RequiredLevel != value))
				{
					this.OnRequiredLevelChanging(value);
					this.SendPropertyChanging();
					this._RequiredLevel = value;
					this.SendPropertyChanged("RequiredLevel");
					this.OnRequiredLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManaCost", DbType="Int")]
		public System.Nullable<int> ManaCost
		{
			get
			{
				return this._ManaCost;
			}
			set
			{
				if ((this._ManaCost != value))
				{
					this.OnManaCostChanging(value);
					this.SendPropertyChanging();
					this._ManaCost = value;
					this.SendPropertyChanged("ManaCost");
					this.OnManaCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Spell_DD_CharacterHasSpell", Storage="_DD_CharacterHasSpells", ThisKey="ID", OtherKey="SpellID")]
		public EntitySet<DD_CharacterHasSpell> DD_CharacterHasSpells
		{
			get
			{
				return this._DD_CharacterHasSpells;
			}
			set
			{
				this._DD_CharacterHasSpells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Class_DD_Spell", Storage="_DD_Class", ThisKey="ClassID", OtherKey="ID", IsForeignKey=true)]
		public DD_Class DD_Class
		{
			get
			{
				return this._DD_Class.Entity;
			}
			set
			{
				DD_Class previousValue = this._DD_Class.Entity;
				if (((previousValue != value) 
							|| (this._DD_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Class.Entity = null;
						previousValue.DD_Spells.Remove(this);
					}
					this._DD_Class.Entity = value;
					if ((value != null))
					{
						value.DD_Spells.Add(this);
						this._ClassID = value.ID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("DD_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DD_Race_DD_Spell", Storage="_DD_Race", ThisKey="RaceID", OtherKey="ID", IsForeignKey=true)]
		public DD_Race DD_Race
		{
			get
			{
				return this._DD_Race.Entity;
			}
			set
			{
				DD_Race previousValue = this._DD_Race.Entity;
				if (((previousValue != value) 
							|| (this._DD_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DD_Race.Entity = null;
						previousValue.DD_Spells.Remove(this);
					}
					this._DD_Race.Entity = value;
					if ((value != null))
					{
						value.DD_Spells.Add(this);
						this._RaceID = value.ID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("DD_Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DD_CharacterHasSpells(DD_CharacterHasSpell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Spell = this;
		}
		
		private void detach_DD_CharacterHasSpells(DD_CharacterHasSpell entity)
		{
			this.SendPropertyChanging();
			entity.DD_Spell = null;
		}
	}
}
#pragma warning restore 1591
